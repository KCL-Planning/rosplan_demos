<?xml version="1.0"?>
<launch>

    <!-- PDDL Arguments -->
    <arg name="domain_path"  default="$(find rosplan_stage_exploration_demo)/pddl/domain_turtlebot_demo.pddl" />
    <arg name="initial_state" default="$(find rosplan_stage_exploration_demo)/pddl/problem_turtlebot_demo.pddl" />
    <arg name="data_path"    default="$(find rosplan_stage_exploration_demo)/pddl/" />
    <arg name="autom_gen_problem_path" default="$(find rosplan_stage_exploration_demo)/pddl/generated_problem.pddl" />

    <!-- Arguments -->
    <arg name="max_prm_size"      default="80" />

    <!-- probabilistic roadmap generation -->
    <include file="$(find rosplan_interface_mapping)/launch/rosplan_roadmap_server.launch" >
        <arg name="use_static_map"      value="false" />
        <arg name="update_waypoints"    value="true" />
        <arg name="update_connectivity" value="true" />
        <arg name="wp_reference_frame"  value="/map" />
        <arg name="rosplan_kb_name"     value="rosplan_knowledge_base" />
        <arg name="costmap_topic"       value="/move_base/global_costmap/costmap" />
    </include>

    <!-- ROSPlan -->
    <include file="$(find rosplan_planning_system)/launch/interfaced_planning_system.launch" >
        <arg name="domain_path" value="$(arg domain_path)" />
        <!-- load a particular initial state into KB at startup (optional) -->
        <arg name="problem_path" value="$(arg initial_state)" />
        <!-- automatically generated pddl problem will be created here -->
        <arg name="autom_gen_problem_path" value="$(arg autom_gen_problem_path)" />
        <!-- planner will produce output plan and write to this location -->
        <arg name="data_path" value="$(arg data_path)" />
    </include>

    <!-- rosplan sensing interface -->
    <node name="rosplan_sensing_interface" pkg="rosplan_sensing_interface" type="sensing_interface.py" respawn="false" output="screen">
        <rosparam command="load" file="$(find rosplan_stage_exploration_demo)/config/sensing_config.yaml" />
        <param name="main_rate"  value="10" />
    </node>

    <!-- rosplan move base action interface, makes link between rosplan dispatcher and hardware -->
    <node pkg="rosplan_interface_movebase" type="rpmovebase" name="rosplan_interface_movebase" respawn="false" output="screen">
        <param name="knowledge_base"        value="rosplan_knowledge_base" />
        <param name="action_server"         value="/move_base" />
        <param name="pddl_action_name"      value="goto_waypoint" />
        <param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
        <param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
        <param name="wp_namespace"          value="/rosplan_demo_waypoints/wp" />
    </node>

    <!-- main coordinator -->
    <node pkg="rosplan_stage_exploration_demo" type="main_executor.py" name="coordinator" respawn="false" required="false" output="screen">
        <param name="max_prm_size"    value="$(arg max_prm_size)" />
        <param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
        <param name="domain_path"     value="$(arg domain_path)" />
        <param name="problem_path"    value="$(arg autom_gen_problem_path)" />
        <param name="data_path"       value="$(arg data_path)" />
    </node>
</launch>
